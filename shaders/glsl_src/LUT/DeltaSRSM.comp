/*
*Based off the works of Eric Bruneton
*https://evasion.inrialpes.fr/~Eric.Bruneton/
*/

#version 460
#include "LUT.glsl"

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout (binding = 0, rgba32f) uniform writeonly image3D rScattering;
layout (binding = 1, rgba32f) uniform writeonly image3D mScattering;
layout (binding = 2) uniform sampler2D Transmittance;

void RayMieIntegrand(float R, float Mu, float MuS, float Nu, float t, out vec3 Ray, out vec3 Mie)
{
    Ray = vec3(0.0);
    Mie = vec3(0.0);

    float Ri = sqrt(R * R + t * t + 2.0 * R * Mu * t);
    float MuSi = (Nu * t + MuS * R) / Ri;
    Ri = clamp(Ri, Rg, Rt);

    if (MuSi >= -sqrt (1.0 - Rg * Rg / (Ri * Ri)))
    {
        vec3 T = GetTransmittance(Transmittance, R, Mu, t) * GetTransmittance(Transmittance, Ri, MuSi);
        Ray = GetAirDensity(Ri, HR) * T;
        Mie = GetAirDensity(Ri, HM) * T;
    }
}

void ComputeDeltaSRDeltaSM(float R, float Mu, float MuS, float Nu, out vec3 Ray, out vec3 Mie)
{
    Ray = vec3(0.0);
    Mie = vec3(0.0);

    float Dx = DistanceToAtmosphere(R, Mu) / float(INSCATTERING_SAMPLES);

    vec3 Rayi, Miei;
    RayMieIntegrand (R, Mu, MuS, Nu, 0.0, Rayi, Miei);

    for(int i = 1; i <= INSCATTERING_SAMPLES; i++)
    {
        float Xi = float(i) * Dx;

        vec3 Rayj, Miej;
        RayMieIntegrand(R, Mu, MuS, Nu, Xi, Rayj, Miej);

        Ray += (Rayi + Rayj) / 2.0 * Dx;
        Mie += (Miei + Miej) / 2.0 * Dx;

        Rayi = Rayj;
        Miei = Miej;
    }

    Ray *= BetaR;
    Mie *= BetaMSca;
}

void main()
{
    if (gl_GlobalInvocationID.z < imageSize(rScattering).z && gl_GlobalInvocationID.x < imageSize(rScattering).x && gl_GlobalInvocationID.y < imageSize(rScattering).y)
    {
        float R, CosViewZenith, CosSunZenith, CosViewun;
        UVWToWorldInscatter(R, CosViewZenith, CosSunZenith, CosViewun);

        vec3 DeltaSR;
        vec3 DeltaSM;
        ComputeDeltaSRDeltaSM(R, CosViewZenith, CosSunZenith, CosViewun, DeltaSR, DeltaSM);
        
        imageStore(rScattering, ivec3(gl_GlobalInvocationID.xyz), vec4(max(DeltaSR, 0.0), 0.0));
        imageStore(mScattering, ivec3(gl_GlobalInvocationID.xyz), vec4(max(DeltaSM, 0.0), 0.0));
    }
}