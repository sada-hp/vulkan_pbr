/*
*Based off the works of Eric Bruneton
*https://evasion.inrialpes.fr/~Eric.Bruneton/
*/
#version 460
#include "LUT.glsl"


layout(push_constant) uniform constants
{
    int Sample;
} 
PushConstants;

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout (binding = 0, rgba32f) uniform writeonly image3D outImage;
layout (binding = 1) uniform sampler2D Transmittance;
layout (binding = 2) uniform sampler2D DeltaE;
layout (binding = 3) uniform sampler3D DeltaSR;
layout (binding = 4) uniform sampler3D DeltaSM;

vec3 ComputeDeltaJ(int Order, float R, float Mu, float MuS, float Nu)
{
    const float dPhi = PI / float(INSCATTERING_SPHERE_SAMPLES);
    const float dTheta = PI / float(INSCATTERING_SPHERE_SAMPLES);
    const float AverageGroundAlbedo = 0.1 / PI;

    R = clamp(R, Rg, Rt);
    Mu = clamp( Mu, -1.0, 1.0);
    MuS = clamp(MuS, -1.0, 1.0);

    float Var = sqrt(1.0 - Mu * Mu) * sqrt(1.0 - MuS * MuS);
    Nu = clamp(Nu, MuS * Mu - Var, MuS * Mu + Var);

    float CosHorizon = -sqrt(1.0 - (Rg / R) * (Rg / R));

    vec3 View = vec3(sqrt(1.0 - Mu * Mu), 0.0, Mu);
    float Sx = View.x == 0.0 ? 0.0 : (Nu - MuS * Mu) / View.x;
    vec3 Sun = vec3(Sx, sqrt(max(0.0, 1.0 - Sx * Sx - MuS * MuS)), MuS);

    vec3 DeltaJ = vec3(0.0);

    for ( int iTheta = 0; iTheta < INSCATTERING_SPHERE_SAMPLES; iTheta++ )
    {
        float Theta = (iTheta + 0.5) * dTheta;
        float SinTheta = sin(Theta);
        float CosTheta = cos(Theta);

        float dGround = 0.0;
        vec3 E = vec3(0.0);

        if (CosTheta < CosHorizon)
        {
            dGround = -R * CosTheta - sqrt(R * R * (CosTheta * CosTheta - 1.0) + Rg * Rg);
            E = AverageGroundAlbedo * GetTransmittance(Transmittance, -(R * CosTheta + dGround) / Rg, dGround);
        }

        float dW = dTheta * dPhi * SinTheta;

        for (int iPhi = 0; iPhi < 2 * INSCATTERING_SPHERE_SAMPLES; iPhi++)
        {
            float Phi = (iPhi + 0.5) * dPhi;
            vec3 W = vec3(cos(Phi) * SinTheta, sin(Phi) * SinTheta, CosTheta);

            float nu1 = dot(Sun, W);
            float nu2 = dot(View, W);

            vec3 Normal = (vec3(0.0, 0.0, R) + dGround * W) / Rg;
            E *= GetIrradiance(DeltaE, Rg, dot(Normal, Sun));

            vec3 S = vec3(0.0);

            if ( Order == 2 )
            {
                vec3 Ray = GetInscattering(DeltaSR, R, W.z, MuS, nu1).rgb;
                vec3 Mie = GetInscattering(DeltaSM, R, W.z, MuS, nu1).rgb;

                S += Ray * RayleighPhase(nu1) + Mie * HGDPhase(nu1);
            }
            else
            {
                S += GetInscattering(DeltaSR, R, W.z, MuS, nu1).rgb;
            }

            DeltaJ += (E + S) * (GetAirDensity(R, HR) * BetaR * RayleighPhase(nu2) +  GetAirDensity(R, HM) * BetaMSca * MiePhase(nu2)) * dW;
        }
    }

    return DeltaJ;
}

void main()
{
    if (gl_GlobalInvocationID.z < imageSize(outImage).z && gl_GlobalInvocationID.x < imageSize(outImage).x && gl_GlobalInvocationID.y < imageSize(outImage).y)
    {
        float R, CosViewZenith, CosSunZenith, CosViewun;
        vec3 UV = GetUV(imageSize(outImage).xyz);

        UVWToWorldInscatter(UV, R, CosViewZenith, CosSunZenith, CosViewun);

        vec3 DeltaJ = ComputeDeltaJ(PushConstants.Sample, R, CosViewZenith, CosSunZenith, CosViewun);
        imageStore(outImage, ivec3(gl_GlobalInvocationID.xyz), vec4(DeltaJ, 0.0));
    }
}