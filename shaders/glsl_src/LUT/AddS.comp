/*
*Based off the works of Eric Bruneton
*https://evasion.inrialpes.fr/~Eric.Bruneton/
*/

#version 460
#include "LUT.glsl"

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout (binding = 0, rgba32f) uniform image3D outImage;
layout (binding = 1) uniform sampler3D DeltaS;

void main()
{
    vec3 UVW = vec3(0.0);
    UVW.xy = vec2(gl_GlobalInvocationID.xy) / vec2(imageSize(outImage).xy);
    UVW.z = float(gl_GlobalInvocationID.z + 0.5) / float(imageSize(outImage).z);

    float R, CosViewZenith, CosSunZenith, CosViewun;
    UVWToWorldInscatter(UVW.xy, gl_GlobalInvocationID.z, R, CosViewZenith, CosSunZenith, CosViewun);

    vec4 S = imageLoad(outImage, ivec3(gl_GlobalInvocationID.xyz));
    imageStore(outImage, ivec3(gl_GlobalInvocationID.xyz), S + vec4(texelFetch(DeltaS, ivec3(gl_GlobalInvocationID.xyz), 0).rgb / RayleighPhase(CosViewun), 0.0));
}