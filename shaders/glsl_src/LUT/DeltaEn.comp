/*
*Based off the works of Eric Bruneton
*https://evasion.inrialpes.fr/~Eric.Bruneton/
*/
#version 460
#include "LUT.glsl"

layout(push_constant) uniform constants
{
    int Sample;
} 
PushConstants;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (binding = 0, rgba32f) uniform writeonly image2D outImage;
layout (binding = 1) uniform sampler3D DeltaSR;
layout (binding = 2) uniform sampler3D DeltaSM;

vec3 ComputeDeltaEn(int Order, float R, float CosSunZenith)
{
    const float dPhi = PI / float(IRRADIANCE_SAMPLES);
    const float dTheta = PI / float(IRRADIANCE_SAMPLES);

    vec3 Sun = vec3(sqrt(1.0 - CosSunZenith * CosSunZenith), 0.0, CosSunZenith);

    vec3 DeltaE = vec3(0.0);
    for (int iPhi = 0; iPhi < 2 * IRRADIANCE_SAMPLES; iPhi++)
    {
        float Phi = (iPhi + 0.5) * dPhi;

        for (int iTheta = 0; iTheta < IRRADIANCE_SAMPLES / 2; iTheta++)
        {
            float Theta = (iTheta + 0.5) * dTheta;
            vec3 W = vec3(cos(Phi) * sin(Theta), sin(Phi) * sin(Theta), cos(Theta));
            float dW = dTheta * dPhi * sin(Theta) * W.z;

            float CosViewun = dot(Sun, W);

            vec3 Ray = GetInscattering(DeltaSR, R, W.z, CosSunZenith, CosViewun).rgb;
            vec3 Mie = GetInscattering(DeltaSM, R, W.z, CosSunZenith, CosViewun).rgb;

            DeltaE += (Ray * RayleighPhase(CosViewun) + Mie * MiePhase(CosViewun)) * dW;
        }
    }

    return DeltaE;
}

void main()
{
    if (gl_GlobalInvocationID.x < imageSize(outImage).x && gl_GlobalInvocationID.y < imageSize(outImage).y)
    {
        float R, Mu;
        vec2 UV = GetUV(imageSize(outImage).xy);
        
        GetIrradienceRMu(UV, R, Mu);

        vec3 DeltaE = ComputeDeltaEn(PushConstants.Sample, R, Mu);
        imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(DeltaE, 0.0));
    }
}