/*
*Based off the works of Eric Bruneton
*https://evasion.inrialpes.fr/~Eric.Bruneton/
*/

#version 460
#include "LUT.glsl"

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout (binding = 0, rgba32f) uniform writeonly image3D outImage;
layout (binding = 1) uniform sampler2D Transmittance;
layout (binding = 2) uniform sampler3D DeltaJ;

vec3 InscatteringIntegrand(float R, float Mu, float MuS, float Nu, float t)
{
    float Ri = sqrt(R * R + t * t + 2.0 * R * Mu * t);
    float Mui = (R * Mu + t) / Ri;
    float MuSi = (Nu * t + MuS * R) / Ri;
    return GetInscattering(DeltaJ, Ri, Mui, MuSi, Nu).rgb * GetTransmittance(Transmittance, R, Mu, t);
}

vec3 ComputeDeltaS(float R, float Mu, float MuS, float Nu)
{
    vec3 DeltaS = vec3 ( 0.0 );

    float Dx = DistanceToAtmosphere(R, Mu) / float(INSCATTERING_SAMPLES);

    vec3 Si = InscatteringIntegrand(R, Mu, MuS, Nu, 0.0);

    for (int i = 1; i <= INSCATTERING_SAMPLES; i++)
    {
        vec3 Sj = InscatteringIntegrand(R, Mu, MuS, Nu, i * Dx);
        DeltaS += (Si + Sj) * 0.5 * Dx;
        Si = Sj;
    }

    return DeltaS;
}

void main()
{
    if (gl_GlobalInvocationID.x < imageSize(outImage).x && gl_GlobalInvocationID.y < imageSize(outImage).y)
    {
        float R, CosViewZenith, CosSunZenith, CosViewun;
        vec3 UV = GetUV(imageSize(outImage).xyz);
        
        UVWToWorldInscatter(UV, R, CosViewZenith, CosSunZenith, CosViewun);

        vec3 DeltaS = ComputeDeltaS(R, CosViewZenith, CosSunZenith, CosViewun);
        imageStore(outImage, ivec3(gl_GlobalInvocationID.xyz), vec4(DeltaS, 0.0));
    }
}