#version 460
#include "ubo.glsl"
#include "common.glsl"
#include "cubemap_matrix.glsl"

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

layout (constant_id = 0) const int Count = 0;
layout (constant_id = 1) const float ColorNorm = 1.f;

layout(binding = 1) uniform sampler2D TransmittanceLUT;
layout(binding = 2) uniform sampler2D IrradianceLUT;
layout(binding = 3) uniform sampler3D InscatteringLUT;
layout(binding = 4) uniform samplerCube EnvironmentLUT;

layout(set = 1, binding = 0, rgba32f) uniform writeonly imageCube outImage;
layout(std140, set = 1, binding = 1) readonly buffer PrecomputeBuffer
{
	vec4 dSample[];
} In;

void main()
{
    vec2 size = imageSize(outImage).xy;
    if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y)
    {
        int ViewIndex = int(gl_GlobalInvocationID.z);
        vec2 UV = (0.5 + vec2(gl_GlobalInvocationID.xy)) / size;
        vec4 ndcSpace = vec4(2.0 * UV - 1.0, 1.0, 1.0);
        vec4 viewSpace = inverse(Projection) * ndcSpace;
        vec4 worldSpace = inverse(View[ViewIndex]) * vec4(viewSpace.xyz, 0.0);
        vec3 direction = normalize(worldSpace.xyz);
        vec3 outColor = vec3(0.0);

        vec3 N = direction;
        vec3 U = normalize(ubo.CameraPosition.xyz);
        vec3 R = normalize(cross(U, N));
        U      = normalize(cross(N, R));

        for (int i = 0; i < Count; i++)
        {
            outColor += texture(EnvironmentLUT, In.dSample[i].x * R + In.dSample[i].y * U + In.dSample[i].z * N).rgb * In.dSample[i].w;
        }

        imageStore(outImage, ivec3(gl_GlobalInvocationID.xyz), vec4(outColor * ColorNorm, 1.0));
    }
}