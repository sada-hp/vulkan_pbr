#version 460
#include "ubo.glsl"
#include "constants.glsl"
#include "common.glsl"
#include "noise.glsl"

#define HEX_COMPUTE
#include "hextiling.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Vertex
{
    vec4 Position;
    vec4 World;
    vec4 UV;
};

struct TerrainLayer
{
    float Ea;
    float Es;
    float Ec;
    int Octaves;
    float Sharpness;
    int Op;
    float Frequency;
    float Offset;
};

layout (set = 1, binding = 0, rgba32f) uniform writeonly image2DArray terrainImage;
layout (std140, set = 1, binding = 1) readonly buffer TerrainLayersBuffer
{
    layout(offset = 0) int Count;
    layout(offset = 4) float TileScale;
    layout(offset = 16) TerrainLayer at[];
} Layers;

layout (set = 1, binding = 2) uniform sampler2DArray terrainImageOld;
layout (std140, set = 1, binding = 3) buffer TerrainReferenceBuffer
{
	Vertex at[];
} vertices;
layout (std140, set = 1, binding = 4) readonly buffer TerrainReferenceOld
{
	Vertex at[];
} verticesOld;

layout (constant_id = 2) const uint VertexCount = 0;
layout (constant_id = 3) const float Scale = 0;
layout (constant_id = 4) const float MinHeight = 0;
layout (constant_id = 5) const float MaxHeight = 0;
layout (constant_id = 6) const uint Seed = 0;
layout (constant_id = 7) const float deltaS = 0;
layout (constant_id = 8) const uint Rings = 0;

vec2 terrain_fbm(vec3 n, vec2 uv, int layer, int level)
{
    TerrainLayer Setting = Layers.at[layer];

    float fbm = 0.0;
    float Ampltude = 1.0;
    float GainA = 0.54;
    float GainF = 2.0;
    float freq = Setting.Frequency;
    float oct = ceil(mix(Setting.Octaves, 1.0, saturate(float(level) / float(Rings))));

    float AltitudeF = Ampltude;
    float SlopeF = Ampltude;

    float river_network = 0.0;

    vec2 Gp = vec2(0.0);
    for (int i = 0; i < oct; i++)
    {
        float Np = 0.0;
        vec2 DNp = vec2(0.0);
        vec2 DNp2 = vec2(0.0);
        perlind(uv, freq, Np, DNp, DNp2);
        Np = saturateAngle((Setting.Offset + Np));
        river_network += Ampltude * (1.0 - abs(Np));

        float gi = mix( GainA, GainA * (1.0 / (1.0 + abs( min(0.0, 0.5 * (DNp2.x + DNp2.y)) ))), Setting.Ec );
        Gp = Gp + DNp * Setting.Es;
        SlopeF = 1.0 / (1.0 + dot(Gp, Gp));
        AltitudeF *= mix(gi, gi * max(0.0, Np), Setting.Ea);
        Ampltude *= GainA;
        freq *= GainF;

        fbm += SlopeF * AltitudeF * Np;

        GainF *= 1.025;
        NOISE_SEED++;
    }

    fbm = Setting.Sharpness >= 0 ? mix(fbm, 1.0 - abs(fbm), Setting.Sharpness) : mix(fbm, abs(fbm), abs(Setting.Sharpness));
    fbm = Setting.Op > 0 ? 1.0-fbm : fbm;

    river_network = saturate(pow(river_network, 1.0 / 1.5));
    river_network = saturate(river_network - 0.5) * 2.0;
    river_network = saturate(river_network);

    return vec2(fbm, river_network);
}

float sample_perlin_sphere(vec3 Normal, float freq)
{
    return clamp(perlin(Normal.xz, freq) * perlin(Normal.xy, freq) * perlin(Normal.yz, freq), -1.0, 1.0);
}

void main()
{
    NOISE_SEED = Seed;

    if (NOISE_SEED != 0 && gl_GlobalInvocationID.x < VertexCount)
    {
        Vertex vertex = vertices.at[gl_GlobalInvocationID.x];
        Vertex oldVertex = verticesOld.at[gl_GlobalInvocationID.x];

        int Level = int(vertex.Position.y);
        float vertexScale = Level == 0 ? 2.0 * Scale : Scale;
        vertexScale = vertexScale * (ubo.CameraRadius - Rg > MaxHeight ? exp2(mix(5.0, 0.0, saturate(float(MaxHeight - MinHeight) / float(ubo.CameraRadius - Rg)))) : 1.0);
        float adjustScale = Scale * exp2(max(Level, deltaS));

        dvec3 Camera1 = ubo.WorldUp.xyz;
        dvec3 Center1 = round(RoundToIncrement(Camera1 * Rg, adjustScale));

        vec4 Val = vec4(0.0);
        ivec3 Texel = ivec3(round(vertex.UV.xy * (imageSize(terrainImage).xy - 1)), Level);
        dmat3 Orientation1 = GetTerrainOrientation();
        vec3 ObjectPosition = round(vec3(Orientation1 * vec3(vertexScale * vertex.Position.x, 0.0, vertexScale * vertex.Position.z) + Center1));
        vec3 Normal = vec3(normalize(ObjectPosition));
        float halfSurfaceRadius = Rg + 0.5 * (MaxHeight - MinHeight);
        vec3 commonSurface = halfSurfaceRadius * RoundToIncrement(halfSurfaceRadius * Normal, adjustScale);

        if (RoundToIncrement(halfSurfaceRadius * normalize(vertex.World.xyz), adjustScale) != commonSurface)
        {
            // move to transfer?
            if (RoundToIncrement(halfSurfaceRadius * normalize(oldVertex.World.xyz), adjustScale) == commonSurface)
            {
                imageStore(terrainImage, Texel, texelFetch(terrainImageOld, Texel, 0));
                vertices.at[gl_GlobalInvocationID.x].World = verticesOld.at[gl_GlobalInvocationID.x].World;
            }
            else if (Layers.Count > 0)
            {
                float pole = abs(dot(Normal, vec3(0, 1, 0)));
                vec2 uv1 = 0.5 + vec2(atan(Normal.z, Normal.x) * ONE_OVER_2PI, asin(Normal.y) * ONE_OVER_2PI);
                vec2 uv2 = 0.5 + vec2(atan(Normal.x, Normal.y) * ONE_OVER_2PI, asin(Normal.z) * ONE_OVER_2PI);
                float pole_w = pole > 0.9 ? 0.0 : (pole >= 0.8 ? 1.0 - ((pole - 0.8) / (0.9 - 0.8)) : 1.0);

                HexParams p1, p2;
                GetHexParams(0.5, Layers.TileScale * uv1, p1);
                GetHexParams(0.5, Layers.TileScale * uv2, p2);
                vec3 Lw = vec3(0.299, 0.587, 0.114);

                vec2 T1 = vec2(0.0), T2 = vec2(0.0);
                if (Layers.Count == 3)
                {
                    vec2 T1a, T1b, T1c, T2a, T2b, T2c;
                    if (pole_w != 0.0)
                    {
                        T1a = terrain_fbm(Normal, uv1, 0, Level);
                        T1b = terrain_fbm(Normal, uv1, 1, Level);
                        T1c = terrain_fbm(Normal, uv1, 2, Level);

                        vec3 Dw1 = vec3(dot(T1a.rrr, Lw), dot(T1b.rrr, Lw), dot(T1c.rrr, Lw));
                        Dw1 = mix(vec3(1.0), Dw1, vec3(0.6));

                        vec3 W1 = Dw1 * pow(vec3(p1.w1, p1.w2, p1.w3), vec3(7));
                        W1 /= (W1.x + W1.y + W1.z);
                        W1 = ProduceHexWeights(W1, p1.v1, p1.v2, p1.v3);
                        T1= W1.x * T1a + W1.y * T1b + W1.z * T1c;
                    }

                    if (pole_w != 1.0)
                    {
                        T2a = terrain_fbm(Normal, uv2, 0, Level);
                        T2b = terrain_fbm(Normal, uv2, 1, Level);
                        T2c = terrain_fbm(Normal, uv2, 2, Level);

                        vec3 Dw2 = vec3(dot(T2a.rrr, Lw), dot(T2b.rrr, Lw), dot(T2c.rrr, Lw));
                        Dw2 = mix(vec3(1.0), Dw2, vec3(0.6));

                        vec3 W2 = Dw2 * pow(vec3(p2.w1, p2.w2, p2.w3), vec3(7));
                        W2 /= (W2.x + W2.y + W2.z);

                        W2 = ProduceHexWeights(W2, p2.v1, p2.v2, p2.v3);
                        T2= W2.x * T2a + W2.y * T2b + W2.z * T2c;
                    }
                }
                else
                {
                    T1 = terrain_fbm(Normal, uv1, 0, Level);
                    T2 = terrain_fbm(Normal, uv2, 0, Level);
                }

                T1.x = ridge_smoothstep(0.0, 0.8, T1.x);
                T2.x = ridge_smoothstep(0.0, 0.8, T2.x);

                Val.xy = mix(T2, T1, pole_w);

                float h = Val.x;
                vertices.at[gl_GlobalInvocationID.x].World = vec4(Normal, Val.x);
                
                Val.xy = vec2(MinHeight + Val.x * (MaxHeight - MinHeight), Val.y);
                imageStore(terrainImage, Texel, Val);
            }
        }
    }
    else if (gl_GlobalInvocationID.x < VertexCount)
    {
        Vertex vertex = vertices.at[gl_GlobalInvocationID.x];
        int Level = int(vertex.Position.y);

        imageStore(terrainImage, ivec3(round(vertex.UV.xy * (imageSize(terrainImage).xy - 1)), Level), vec4(MinHeight, 0.0, 0.0, 0.0));
    }
}
