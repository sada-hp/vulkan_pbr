#version 460
#include "ubo.glsl"
#include "constants.glsl"
#include "common.glsl"
#include "noise.glsl"

#define HEX_COMPUTE
#include "hextiling.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct TerrainVertex
{
    vec4 Position;
    vec4 UV;
};

struct TerrainLayer
{
    float Ea;
    float Es;
    float Ec;
    int Octaves;
    float Sharpness;
    int Op;
    float Frequency;
    float Offset;
};

layout (set = 1, binding = 0, rgba32f) uniform writeonly image2DArray terrainImage;
layout (std140, set = 1, binding = 1) readonly buffer TerrainLayersBuffer
{
    layout(offset = 0) int Count;
    layout(offset = 4) float TileScale;
    layout(offset = 16) TerrainLayer at[];
} Layers;

layout (set = 1, binding = 2) uniform sampler2DArray terrainImageOld;
layout (std140, set = 1, binding = 3) readonly buffer TerrainReferenceBuffer
{
	TerrainVertex at[];
} verticesRef;
layout (std140, set = 1, binding = 4) buffer TerrainBuffer
{
	TerrainVertex at[];
} verticesOut;
layout (std140, set = 1, binding = 5) readonly buffer TerrainBufferOld
{
	TerrainVertex at[];
} verticesOld;

layout (constant_id = 2) const uint VertexCount = 0;
layout (constant_id = 3) const float Scale = 0;
layout (constant_id = 4) const float MinHeight = 0;
layout (constant_id = 5) const float MaxHeight = 0;
layout (constant_id = 6) const uint Seed = 0;
layout (constant_id = 7) const float deltaS = 0;
layout (constant_id = 8) const uint Rings = 0;

float terrain_fbm(vec3 n, vec2 uv, int layer, int level)
{
    TerrainLayer Setting = Layers.at[layer];

    float fbm = 0.0;
    float Ampltude = 1.0;
    float GainA = 0.54;
    float GainF = 2.0;
    float freq = Setting.Frequency;
    float oct = ceil(mix(Setting.Octaves, 1.0, saturate(float(level) / float(Rings))));

    float AltitudeF = Ampltude;
    float SlopeF = Ampltude;

    vec2 Gp = vec2(0.0);
    for (int i = 0; i < oct; i++)
    {
        float Np = 0.0;
        vec2 DNp = vec2(0.0);
        vec2 DNp2 = vec2(0.0);
        perlind(uv, freq, Np, DNp, DNp2);
        Np = saturateAngle((Setting.Offset + Np));

        float gi = mix( GainA, GainA * (1.0 / (1.0 + abs( min(0.0, 0.5 * (DNp2.x + DNp2.y)) ))), Setting.Ec );
        Gp = Gp + DNp * Setting.Es;
        SlopeF = 1.0 / (1.0 + dot(Gp, Gp));
        AltitudeF *= mix(gi, gi * max(0.0, Np), Setting.Ea);
        Ampltude *= GainA;
        freq *= GainF;

        fbm += SlopeF * AltitudeF * Np;

        GainF *= 1.025;
        NOISE_SEED++;
    }

    fbm = Setting.Sharpness >= 0 ? mix(fbm, 1.0 - abs(fbm), Setting.Sharpness) : mix(fbm, abs(fbm), abs(Setting.Sharpness));
    fbm = Setting.Op > 0 ? 1.0-fbm : fbm;

    return ridge_smoothstep(0.0, 1.0, fbm);
}

void main()
{
    NOISE_SEED = Seed;

    if (NOISE_SEED != 0 && gl_GlobalInvocationID.x < VertexCount)
    {
        TerrainVertex vertex = verticesRef.at[gl_GlobalInvocationID.x];
        TerrainVertex outVertex = verticesOut.at[gl_GlobalInvocationID.x];
        TerrainVertex oldVertex = verticesOld.at[gl_GlobalInvocationID.x];

        int Level = int(vertex.Position.y);
        float vertexScale = Scale * (ubo.CameraRadius - Rg > MaxHeight ? exp2(mix(5.0, 0.0, saturate(float(MaxHeight - MinHeight) / float(ubo.CameraRadius - Rg)))) : 1.0);
        float adjustScale = vertexScale * exp2(max(Level, deltaS));
        vertexScale = Level == 0 ? 2.0 * vertexScale : vertexScale;

        dvec3 Camera1 = ubo.WorldUp.xyz;
        dvec3 Center1 = round(RoundToIncrement(Camera1 * Rg, adjustScale));

        vec4 Val = vec4(0.0);
        ivec3 Texel = ivec3(round(vertex.UV.xy * (imageSize(terrainImage).xy - 1)), Level);
        vec3 ObjectPosition = round(vec3(mat3(ubo.PlanetMatrix) * vec3(vertexScale * vertex.Position.x, 0.0, vertexScale * vertex.Position.z) + Center1));
        vec3 Normal = vec3(normalize(ObjectPosition));
        float halfSurfaceRadius = Rg + 0.5 * (MaxHeight - MinHeight);
        vec3 commonSurface = halfSurfaceRadius * RoundToIncrement(halfSurfaceRadius * Normal, adjustScale);

        if (RoundToIncrement(halfSurfaceRadius * normalize(outVertex.Position.xyz), adjustScale) != commonSurface)
        {
            // move to transfer?
            if (RoundToIncrement(halfSurfaceRadius * normalize(oldVertex.Position.xyz), adjustScale) == commonSurface)
            {
                imageStore(terrainImage, Texel, texelFetch(terrainImageOld, Texel, 0));
                verticesOut.at[gl_GlobalInvocationID.x].Position = verticesOld.at[gl_GlobalInvocationID.x].Position;
            }
            else if (Layers.Count > 0)
            {
                float pole = abs(dot(Normal, vec3(0, 1, 0)));
                vec2 uv1 = 0.5 + vec2(atan(Normal.z, Normal.x) * ONE_OVER_2PI, asin(Normal.y) * ONE_OVER_2PI);
                vec2 uv2 = 0.5 + vec2(atan(Normal.x, Normal.y) * ONE_OVER_2PI, asin(Normal.z) * ONE_OVER_2PI);
                float pole_w = pole > 0.9 ? 0.0 : (pole >= 0.7 ? 1.0 - ((pole - 0.7) / (0.9 - 0.7)) : 1.0);

                float T1 = terrain_fbm(Normal, uv1, 0, Level);
                float T2 = terrain_fbm(Normal, uv2, 0, Level);

                float f1 = 0.5, f2 = 0.5;
                for (int layer = 1; layer < Layers.Count; layer++)
                {
                    NOISE_SEED += layer * layer * layer;

                    f1 = smootherstep(0.0, 1.0, 1.0 - fbm_worley(uv1, Layers.TileScale, 3));
                    f2 = smootherstep(0.0, 1.0, 1.0 - fbm_worley(uv2, Layers.TileScale, 3));

                    f1 = smootherstep(0.0, 1.0, smootherstep(0.0, 1.0, f1));
                    f2 = smootherstep(0.0, 1.0, smootherstep(0.0, 1.0, f2));

                    T1 = (1.0 - f1) * T1 + f1 * terrain_fbm(Normal, uv1, layer, Level);
                    T2 = (1.0 - f2) * T2 + f2 * terrain_fbm(Normal, uv2, layer, Level);
                }

                Val.x = mix(T2, T1, pole_w);
                Val.x = floor(MinHeight + saturate(Val.x) * (MaxHeight - MinHeight));

                verticesOut.at[gl_GlobalInvocationID.x].Position = vec4(Normal, Level);
                imageStore(terrainImage, Texel, Val);
            }
        }
    }
    else if (gl_GlobalInvocationID.x < VertexCount)
    {
        // TerrainVertex vertex = vertices.at[gl_GlobalInvocationID.x];
        // int Level = int(vertex.Position.y);

        // imageStore(terrainImage, ivec3(round(vertex.UV.xy * (imageSize(terrainImage).xy - 1)), Level), vec4(MinHeight, 0.0, 0.0, 0.0));
    }
}