#version 460
#include "ubo.glsl"
#include "constants.glsl"
#include "common.glsl"
#include "noise.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Vertex
{
    vec4 Position;
    vec4 UV;
};

layout (set = 1, binding = 0, r32f) uniform writeonly image2DArray terrainImage;
layout (std140, set = 1, binding = 1) readonly buffer TerrainVertex{
	Vertex at[];
} vertices;

layout (constant_id = 2) const uint VertexCount = 0;
layout (constant_id = 3) const float Scale = 0;
layout (constant_id = 4) const float MinHeight = 0;
layout (constant_id = 5) const float MaxHeight = 0;
layout (constant_id = 6) const uint Seed = 0;

float terrain_fbm(vec3 n, float octaves)
{
    float pole = abs(dot(n, vec3(0, 1, 0)));
    vec2 uv1 = 0.5 + vec2(atan(n.z, n.x) * ONE_OVER_2PI, asin(n.y) * ONE_OVER_2PI);
    vec2 uv2 = 0.5 + vec2(atan(n.x, n.y) * ONE_OVER_2PI, asin(n.z) * ONE_OVER_2PI);

    float left = pole > 0.9 ? 0.0 : (pole >= 0.8 ? 1.0 - ((pole - 0.8) / (0.9 - 0.8)) : 1.0);
    float right = 1.0 - left;

    float fbm = 0.0;
    float Freq = 500.0;
    float Ampltude = 1.0;
    float GainA = 0.5;
    float GainF = 2.0;

    float AltitudeF = Ampltude;
    float SlopeF = Ampltude;

    vec2 Gp = vec2(0.0);
    for (int i = 0; i < octaves; i++)
    {
        float Np = 0.0;
        vec2 DNp = vec2(0.0);
        vec2 DNp2 = vec2(0.0);

        if (left > 0.0)
        {
            float _Np = 0.0;
            vec2 _DNp = vec2(0.0);
            vec2 _DNp2 = vec2(0.0);
            perlind(uv1, Freq, _Np, _DNp, _DNp2);

            Np += left * _Np;
            DNp += left * _DNp;
            DNp2 += left * _DNp2;
        }

        if (right > 0.0)
        {
            float _Np = 0.0;
            vec2 _DNp = vec2(0.0);
            vec2 _DNp2 = vec2(0.0);
            perlind(uv2, Freq, _Np, _DNp, _DNp2);

            Np += right * _Np;
            DNp += right * _DNp;
            DNp2 += right * _DNp2;
        }

        float gi = mix( GainA, GainA * (1.0 / (1.0 + abs( min(0.0, 0.5 * (DNp2.x + DNp2.y)) ))), 0.65 );
        fbm += SlopeF * AltitudeF * Np;

        Gp = Gp + DNp * 0.4;
        SlopeF = (1.0 / 1.0 + dot(Gp, Gp));
        AltitudeF *= mix(gi, gi * max(0.0, Np), 0.3);
        Freq *= GainF;
    }

    float nb = abs(fbm);
    float nr = 1.0 - nb;
    float w = (1.0 - sqrt(left * worley(-uv1, 150.0) + right * worley(-uv2, 150.0))) * 2.0 - 1.0;
    fbm = w >= 0 ? mix(fbm, nr, w) : mix(fbm, nb, abs(w));

    fbm = 0.5 + 0.5 * fbm;
    fbm = fbm * pow(abs(fbm), 2.0);

    return saturate(fbm - 0.05);
}

float sample_perlin_sphere(vec3 Normal, float freq)
{
    return clamp(perlin(Normal.xz, freq) * perlin(Normal.xy, freq) * perlin(Normal.yz, freq), -1.0, 1.0);
}

void main()
{
    NOISE_SEED = Seed;

    if (NOISE_SEED != 0 && gl_GlobalInvocationID.x < VertexCount)
    {
        Vertex vertex = vertices.at[gl_GlobalInvocationID.x];

        int Level = int(vertex.Position.y);
#if 1   
        dmat3 Orientation = GetTerrainOrientation();
        dvec3 Center = RoundToIncrement(ubo.CameraPositionFP64.xyz, Scale * exp2(Level));
#else
        dmat3 Orientation;
        Orientation[0] = vec3(1.0, 0.0, 0.0);
        Orientation[1] = normalize(dvec3(0.0, Rg, 0.0));
        Orientation[2] = normalize(cross(Orientation[0], Orientation[1]));
        Orientation[0] = normalize(cross(Orientation[1], Orientation[2]));
        dvec3 Center = dvec3(0.0, Rg, 0.0);
#endif
        vec3 ObjectPosition = vec3(Orientation * vec3(vertex.Position.x, 0.0, vertex.Position.z) + Center);
        vec3 Normal = vec3(normalize(ObjectPosition));

        float Noise = terrain_fbm(Normal, 10);
        imageStore(terrainImage, ivec3(round(vertex.UV.xy * (imageSize(terrainImage).xy - 1)), Level), vec4(MinHeight + Noise * (MaxHeight - MinHeight), 0.0, 0.0, 0.0));
    }
    else if (gl_GlobalInvocationID.x < VertexCount)
    {
        Vertex vertex = vertices.at[gl_GlobalInvocationID.x];
        int Level = int(vertex.Position.y);

        imageStore(terrainImage, ivec3(round(vertex.UV.xy * (imageSize(terrainImage).xy - 1)), Level), vec4(MinHeight, 0.0, 0.0, 0.0));
    }
}
