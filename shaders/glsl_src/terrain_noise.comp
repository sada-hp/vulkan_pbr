#version 460
#include "ubo.glsl"
#include "constants.glsl"
#include "common.glsl"
#include "noise.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

struct Vertex
{
    vec4 Position;
    vec4 World;
    vec4 UV;
};

layout (set = 1, binding = 0, rgba32f) uniform writeonly image2DArray terrainImage;
layout(set = 1, binding = 1) uniform TerrainLayer
{
    float Ea;
    float Es;
    float Ec;
    float Sharpness;
} Params;
layout (set = 1, binding = 2) uniform sampler2DArray terrainImageOld;
layout (std140, set = 1, binding = 3) buffer TerrainReference{
	Vertex at[];
} vertices;
layout (std140, set = 1, binding = 4) readonly buffer TerrainReference2{
	Vertex at[];
} verticesOld;

layout (constant_id = 2) const uint VertexCount = 0;
layout (constant_id = 3) const float Scale = 0;
layout (constant_id = 4) const float MinHeight = 0;
layout (constant_id = 5) const float MaxHeight = 0;
layout (constant_id = 6) const uint Seed = 0;
layout (constant_id = 7) const float deltaS = 0;

vec2 terrain_fbm(vec3 n, float freq, float octaves)
{
    float pole = abs(dot(n, vec3(0, 1, 0)));
    vec2 uv1 = 0.5 + vec2(atan(n.z, n.x) * ONE_OVER_2PI, asin(n.y) * ONE_OVER_2PI);
    vec2 uv2 = 0.5 + vec2(atan(n.x, n.y) * ONE_OVER_2PI, asin(n.z) * ONE_OVER_2PI);

    float left = pole > 0.9 ? 0.0 : (pole >= 0.8 ? 1.0 - ((pole - 0.8) / (0.9 - 0.8)) : 1.0);
    float right = 1.0 - left;

    float fbm = 0.0;
    float Ampltude = 1.0;
    float GainA = 0.5;
    float GainF = 2.0;

    float AltitudeF = Ampltude;
    float SlopeF = Ampltude;

    float river_network = 0.0;

    vec2 Gp = vec2(0.0);
    for (int i = 0; i < octaves; i++)
    {
        float Np = 0.0;
        vec2 DNp = vec2(0.0);
        vec2 DNp2 = vec2(0.0);

        if (left > 0.0)
        {
            float _Np = 0.0;
            vec2 _DNp = vec2(0.0);
            vec2 _DNp2 = vec2(0.0);
            perlind(uv1, freq, _Np, _DNp, _DNp2);

            Np += left * _Np;
            DNp += left * _DNp;
            DNp2 += left * _DNp2;
        }

        if (right > 0.0)
        {
            float _Np = 0.0;
            vec2 _DNp = vec2(0.0);
            vec2 _DNp2 = vec2(0.0);
            perlind(uv2, freq, _Np, _DNp, _DNp2);

            Np += right * _Np;
            DNp += right * _DNp;
            DNp2 += right * _DNp2;
        }

        float gi = mix( GainA, GainA * (1.0 / (1.0 + abs( min(0.0, 0.5 * (DNp2.x + DNp2.y)) ))), Params.Ec );
        fbm += SlopeF * AltitudeF * Np;
        river_network += SlopeF * AltitudeF * abs(Np);

        Gp = Gp + DNp * Params.Es;
        SlopeF = 1.0 / (1.0 + dot(Gp, Gp));
        AltitudeF *= mix(gi, gi * max(0.0, Np), Params.Ea);
        Ampltude *= GainA;
        freq *= GainF;
        GainF *= 1.025;

        NOISE_SEED++;
    }

    float nb = abs(fbm);
    float nr = 1.0 - nb;
    float worley = (left * worley(-uv1, 65.0) + right * worley(-uv2, 65.0));
    float w = worley * 2.0 - 1.0;
    fbm = w >= 0 ? mix(fbm, nr, w) : mix(fbm, nb, abs(w));

    river_network = saturate(pow(river_network, 1.0 / 1.5));
    river_network = saturate(river_network - 0.5) * 2.0;
    river_network = saturate(river_network);

    return vec2(abs(fbm), river_network);
}

float sample_perlin_sphere(vec3 Normal, float freq)
{
    return clamp(perlin(Normal.xz, freq) * perlin(Normal.xy, freq) * perlin(Normal.yz, freq), -1.0, 1.0);
}

void main()
{
    NOISE_SEED = Seed;

    if (NOISE_SEED != 0 && gl_GlobalInvocationID.x < VertexCount)
    {
        Vertex vertex = vertices.at[gl_GlobalInvocationID.x];
        Vertex oldVertex = verticesOld.at[gl_GlobalInvocationID.x];

        int Level = int(vertex.Position.y);
        float adjustScale = Scale * exp2(max(Level, deltaS));

        dvec3 Camera1 = ubo.WorldUp.xyz;
        dvec3 Center1 = round(RoundToIncrement(Camera1 * Rg, adjustScale));

        vec4 Val = vec4(0.0);
        ivec3 Texel = ivec3(round(vertex.UV.xy * (imageSize(terrainImage).xy - 1)), Level);
        dmat3 Orientation1 = GetTerrainOrientation(Camera1);
        vec3 ObjectPosition = round(vec3(Orientation1 * vec3(vertex.Position.x, 0.0, vertex.Position.z) + Center1));
        vec3 Normal = vec3(normalize(ObjectPosition));

        float halfSurfaceRadius = Rg + 0.5 * (MaxHeight - MinHeight);
        vec3 commonSurface = halfSurfaceRadius * RoundToIncrement(halfSurfaceRadius * Normal, adjustScale);
        if (RoundToIncrement(halfSurfaceRadius * normalize(vertex.World.xyz), adjustScale) != commonSurface)
        {
            if (RoundToIncrement(halfSurfaceRadius * normalize(oldVertex.World.xyz), adjustScale) == commonSurface)
            {
                imageStore(terrainImage, Texel, texelFetch(terrainImageOld, Texel, 0));
                vertices.at[gl_GlobalInvocationID.x].World = verticesOld.at[gl_GlobalInvocationID.x].World;
            }
            else
            {
                Val.xy = abs(0.5 * terrain_fbm(Normal, 100.0, 5) + 0.25 * terrain_fbm(Normal, 400.0, 10) + 0.25 * terrain_fbm(Normal, 800.0, 15));
                Val.x = smootherstep(0.0, 1.0, Val.x);
                
                float h = Val.x;
                Val.xy = vec2(MinHeight + Val.x * (MaxHeight - MinHeight), Val.y);

                imageStore(terrainImage, Texel, Val);
                vertices.at[gl_GlobalInvocationID.x].World = vec4(Normal * (Rg + Val.x), h);
            }
        }
    }
    else if (gl_GlobalInvocationID.x < VertexCount)
    {
        Vertex vertex = vertices.at[gl_GlobalInvocationID.x];
        int Level = int(vertex.Position.y);

        imageStore(terrainImage, ivec3(round(vertex.UV.xy * (imageSize(terrainImage).xy - 1)), Level), vec4(MinHeight, 0.0, 0.0, 0.0));
    }
}
