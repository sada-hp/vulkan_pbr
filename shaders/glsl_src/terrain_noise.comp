#version 460
#include "ubo.glsl"
#include "common.glsl"
#include "noise.glsl"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (set = 1, binding = 0, rgba32f) uniform writeonly image2D outImage;
layout (std140, set = 1, binding = 1) readonly buffer TerrainVertex{
	vec4 at[];
} vertices;

layout (constant_id = 0) const uint VertexCount = 0;
layout (constant_id = 1) const float Scale = 0;
layout (constant_id = 2) const uint Seed = 0;

void main()
{
    NOISE_SEED = Seed;

    uint globalIndex = gl_GlobalInvocationID.y * imageSize(outImage).x + gl_GlobalInvocationID.x;

    if (NOISE_SEED != 0 && globalIndex < VertexCount && all(lessThan(gl_GlobalInvocationID.xy, imageSize(outImage).xy)))
    {
        vec3 vertex = vertices.at[globalIndex].xyz;

        dmat3 Orientation;
        Orientation[0] = vec3(1.0, 0.0, 0.0);
        Orientation[1] = normalize(ubo.CameraPositionFP64.xyz);
        Orientation[2] = normalize(cross(Orientation[0], Orientation[1]));
        Orientation[0] = normalize(cross(Orientation[1], Orientation[2]));

        dvec3 Center = RoundToIncrement(ubo.CameraPositionFP64.xyz, Scale * exp2(vertex.y));
        vec3 ObjectPosition = vec3(Orientation * vec3(vertex.x, 0.0, vertex.z) + Center);
        vec3 Normal = vec3(normalize(ObjectPosition));

        float perlin1 = perlin(Normal.xz, 100.0 * 1.0);
        float perlin2 = perlin(Normal.yx, 100.0 * 1.0);
        float perlin3 = perlin(Normal.yz, 100.0 * 1.0);

        float perlin4 = perlin(Normal.xz, 300.0 * 1.0);
        float perlin5 = perlin(Normal.xz, 300.0 * 1.0);
        float perlin6 = perlin(Normal.xz, 300.0 * 1.0);

        float Height = 0.25 * saturate(perlin1 * perlin2 * perlin3) + 0.75 * saturate(perlin4 * perlin5 * perlin6);

        imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(Height));
    }
    else
    {
        imageStore(outImage, ivec2(gl_GlobalInvocationID.xy), vec4(0.0));
    }
}
