#version 460
#extension GL_EXT_shader_atomic_float : enable

#include "ubo.glsl"
#include "noise.glsl"
#include "common.glsl"
#include "constants.glsl"

struct Vertex
{
    vec4 Position;
    vec4 UV;
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout (constant_id = 2) const float Scale = 0;
layout (constant_id = 3) const float MinHeight = 0;
layout (constant_id = 4) const float MaxHeight = 0;
layout (constant_id = 5) const uint Seed = 0;

layout (set = 1, binding = 0) uniform sampler2DArray NoiseMap;
layout (set = 1, binding = 1, r32f) uniform image2DArray target;

float sample_height(ivec3 texel, ivec3 Offset)
{
    float h1 = 99999999999.0;
    if (texel.x + Offset.x < imageSize(target).x && texel.y + Offset.y < imageSize(target).y)
    {
        h1 = texelFetch(NoiseMap, texel + Offset, 0).r;
    }

    float h2 = 99999999999.0;
    if (texel.x - Offset.x >= 0 && texel.y - Offset.y >= 0)
    {
        h2 = texelFetch(NoiseMap, texel - Offset, 0).r;
    }

    return round(min(h1, h2));
}

void spill(ivec3 Texel, float xp, float zp, float w, int radius)
{
    int Level = Texel.z;
    for (int z = Texel.y - radius; z <= Texel.y + radius; z++)
    {
        float zo = z - zp;
        float zo2 = zo * zo;

        for (int x = Texel.x - radius; x <= Texel.x + radius; x++)
        {
            float xo = x - xp;
            float nw = 1.0 - saturate((xo * xo + zo2) * 0.25);
            
            if (nw <= 0.0)
                continue;

            nw *= ONE_OVER_2PI;

            Texel = ivec3(x, z, Level);
            if (Texel.x > 0 && Texel.x < imageSize(target).x && Texel.y > 0 && Texel.y < imageSize(target).y)
                imageAtomicAdd(target, Texel, nw * w);
        }
    }
}

bool test_run()
{
    ivec3 Texel = ivec3(gl_GlobalInvocationID.xyz);

    float Kw = 0.01;
    float dt = 0.6;

    float xf = 0.0, zf = 0.0;
    float xp = Texel.x, zp = Texel.y;

    float h = sample_height(Texel, ivec3(0));

    if (h <= MinHeight * 1.01)
        return false;

    vec4 dH = vec4(h,
        sample_height(Texel, ivec3(1, 0, 0)),
        sample_height(Texel, ivec3(0, 1, 0)),
        sample_height(Texel, ivec3(1, 1, 0))
    );

    float dx = 0.0, dz = 0.0;
    float s = 0.0, v = 0.0, w = texelFetch(NoiseMap, Texel, 0).g * 1000.0;

    while (w > 0.01)
    {
        float gx = dH.x + dH.z - dH.y - dH.w;
        float gz = dH.x + dH.y - dH.z - dH.w;

        dx = (dx - gx) * dt + gx;
        dz = (dz - gz) * dt + gz;

        float dl = sqrt(dx * dx + dz * dz);
        if (dl <= 0.001)
        {
            break;
        }
        else
        {
            dx /= dl;
            dz /= dl;
        }

        float nxp = xp + dx;
        float nzp = zp + dz;

        Texel = ivec3(int(floor(nxp)), int(floor(nzp)), Texel.z);

        float nxf = fract(nxp);
        float nzf = fract(nzp);

        if (Texel.x + 1 >= imageSize(target).x || Texel.y + 1 >= imageSize(target).y)
            return false;

        float nh00 = sample_height(Texel, ivec3(0));
        float nh10 = sample_height(Texel, ivec3(1, 0, 0));
        float nh01 = sample_height(Texel, ivec3(0, 1, 0));
        float nh11 = sample_height(Texel, ivec3(1, 1, 0));

        float nh = mix(nh00, nh10, nxf) * (1-nzf) + mix(nh01, nh11, nxf) * nzf;

        if (nh >= h)
        {
            break;
        }

        float dh = h - nh;
        float slope = dh;

        w *= 1 - Kw;

        xp=nxp; zp=nzp;
        xf=nxf; zf=nzf;

        h=nh;
        dH = vec4(nh00, nh10, nh01, nh11);
    }

    return h <= MinHeight * 1.01;
}

void erosion_loop()
{
    ivec3 Texel = ivec3(gl_GlobalInvocationID.xyz);

    float Kw = 0.01;
    float dt = 0.6;

    float xf = 0.0, zf = 0.0;
    float xp = Texel.x, zp = Texel.y;

    float h = sample_height(Texel, ivec3(0));

    vec4 dH = vec4(h,
        sample_height(Texel, ivec3(1, 0, 0)),
        sample_height(Texel, ivec3(0, 1, 0)),
        sample_height(Texel, ivec3(1, 1, 0))
    );

    float dx = 0.0, dz = 0.0;
    float s = 0.0, v = 0.0, w = texelFetch(NoiseMap, Texel, 0).g * 1000.0;

    while (w > 0.01)
    {
        spill(Texel, xp, zp, Kw * w, 1);

        float gx = dH.x + dH.z - dH.y - dH.w;
        float gz = dH.x + dH.y - dH.z - dH.w;

        dx = (dx - gx) * dt + gx;
        dz = (dz - gz) * dt + gz;

        float dl = sqrt(dx * dx + dz * dz);
        if (dl <= 0.001)
        {
            break;
        }
        else
        {
            dx /= dl;
            dz /= dl;
        }

        float nxp = xp + dx;
        float nzp = zp + dz;

        Texel = ivec3(int(floor(nxp)), int(floor(nzp)), Texel.z);

        float nxf = fract(nxp);
        float nzf = fract(nzp);

        float nh00 = sample_height(Texel, ivec3(0));
        float nh10 = sample_height(Texel, ivec3(1, 0, 0));
        float nh01 = sample_height(Texel, ivec3(0, 1, 0));
        float nh11 = sample_height(Texel, ivec3(1, 1, 0));

        float nh = mix(nh00, nh10, nxf) * (1-nzf) + mix(nh01, nh11, nxf) * nzf;

        if (nh >= h)
        {
            break;
        }

        float dh = h - nh;
        float slope = dh;

        w *= 1 - Kw;

        xp=nxp; zp=nzp;
        xf=nxf; zf=nzf;

        h=nh;
        dH = vec4(nh00, nh10, nh01, nh11);
    }

    spill(Texel, xp, zp, Kw * w, 1);
}

void main()
{
    NOISE_SEED = Seed;

    if (NOISE_SEED > 0 && gl_GlobalInvocationID.x < imageSize(target).x && gl_GlobalInvocationID.y < imageSize(target).y && test_run())
        erosion_loop();
}