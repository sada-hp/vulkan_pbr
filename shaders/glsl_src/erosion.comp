#version 460
#extension GL_EXT_shader_atomic_float : enable

#include "noise.glsl"
#include "common.glsl"
#include "constants.glsl"

struct Vertex
{
    vec4 Position;
    vec4 UV;
};

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout (constant_id = 2) const float Scale = 0;
layout (constant_id = 3) const float MinHeight = 0;
layout (constant_id = 4) const float MaxHeight = 0;
layout (constant_id = 5) const uint Seed = 0;

layout (binding = 0) uniform sampler2DArray NoiseMap;
layout (binding = 1, r32f) uniform image2DArray target;

bool clamp_coords(ivec3 texel)
{
    ivec2 size = textureSize(NoiseMap, 0).xy;
    return !(texel.x >= size.x || texel.y >= size.y || texel.x < 0 || texel.y < 0);
}

vec4 sample_height(ivec3 texel)
{
    vec2 UV = (vec2(texel.xy) + 0.5) / vec2(textureSize(NoiseMap, 0).xy);
    return textureGather(NoiseMap, vec3(UV, texel.z), 0).wzxy;
}

void spill(ivec3 Texel, float xp, float zp, float w)
{
    const int radius = 1;
    for (int z = Texel.y - radius; z <= Texel.y + radius; z++)
    {
        float zo = z - zp;
        float zo2 = zo * zo;

        for (int x = Texel.x - radius; x <= Texel.x + radius; x++)
        {
            float xo = x - xp;
            float nw = 1.0 - saturate((xo * xo + zo2) * 0.25);
            
            if (nw <= 0.0)
                continue;

            nw *= ONE_OVER_2PI;

            if (clamp_coords(Texel))
                imageAtomicAdd(target, Texel, nw * w);
        }
    }
}

void erosion_loop(ivec3 Texel, float w0)
{
    float Kw = 0.02;
    float dt = 0.5;

    float xf = 0.0, zf = 0.0;
    float xp = Texel.x, zp = Texel.y;

    vec4 dH = sample_height(Texel);
    float h = dH.x;

    float dx = 0.0, dz = 0.0;

    float w = (h - MinHeight) / (MaxHeight - MinHeight);
    w = 10.0 * ridge_smoothstep(0.0, 1.0, w) + w0;

    int steps = 1000;
    while (h > 0.0 && steps > 0)
    {
        steps--;
        spill(Texel, xp, zp, Kw * w);

        float gx = dH.x + dH.z - dH.y - dH.w;;
        float gz = dH.x + dH.y - dH.z - dH.w;;

        float dx1 = (dx - gx) * dt + gx;
        float dz1 = (dz - gz) * dt + gz;

        float dl = sqrt(dx1 * dx1 + dz1 * dz1);
        if (dl > dt)
        {
            dx = dx1 / dl;
            dz = dz1 / dl;
        }

        float nxp = xp + dx;
        float nzp = zp + dz;
        float nxf = fract(nxp);
        float nzf = fract(nzp);

        Texel = ivec3(int(floor(nxp)), int(floor(nzp)), Texel.z);

        if (!clamp_coords(Texel))
            break;

        dH = sample_height(Texel);
        float nh = mix(mix(dH.x, dH.y, nxf), mix(dH.z, dH.w, nxf), nzf);

        if (h - nh < 10.0)
        {
            break;
        }

        xp=nxp; zp=nzp;
        xf=nxf; zf=nzf;
        h=nh;
    }

    // spill(Texel, xp, zp, Kw * w);
}

void main()
{
    ivec2 size = textureSize(NoiseMap, 0).xy;
    ivec3 Texel = ivec3(gl_GlobalInvocationID.xyz);
    float w0 = imageAtomicExchange(target, Texel, 0.0);

    memoryBarrierImage();

    // if (gl_GlobalInvocationID.x < imageSize(target).x && gl_GlobalInvocationID.y < imageSize(target).y)
    erosion_loop(Texel, w0);
}