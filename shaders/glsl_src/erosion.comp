#version 460
#extension GL_EXT_shader_atomic_float : enable

#include "ubo.glsl"
#include "noise.glsl"
#include "common.glsl"
#include "constants.glsl"

struct Vertex
{
    vec4 Position;
    vec4 UV;
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout (constant_id = 2) const float Scale = 0;
layout (constant_id = 3) const float MinHeight = 0;
layout (constant_id = 4) const float MaxHeight = 0;

layout (set = 1, binding = 0) uniform sampler2DArray NoiseMap;
layout (set = 1, binding = 1, r32f) uniform image2DArray target;

ivec3 clamp_coords(ivec3 texel)
{
    ivec2 size = textureSize(NoiseMap, 0).xy;
    ivec2 onefourth = size / 4;
    ivec2 threefourth = 3 * onefourth;

    // if texel is outside the bounds of current level    
    if (texel.x >= size.x || texel.y >= size.y || texel.x < 0 || texel.y < 0)
    {
        texel.z += 1;
        texel.x = onefourth.x + (texel.x < 0 ? texel.x : int(ceil(float(texel.x) / 2)));
        texel.y = onefourth.y + (texel.y < 0 ? texel.y : int(ceil(float(texel.y) / 2)));
    }
    else if (texel.z > 0 && texel.x >= onefourth.x && texel.x <= threefourth.x && texel.y >= onefourth.y && texel.y <= threefourth.y)
    {
        texel.z -= 1;
        texel.xy = 2 * (texel.xy - onefourth);
    }

    return texel;
}

float sample_height(ivec3 texel, ivec3 Offset)
{
    texel = clamp_coords(texel + Offset);
    return texelFetch(NoiseMap, texel, 0).r;
}

void spill(ivec3 Texel, float xp, float zp, float w)
{
    const int radius = 4;
    for (int z = Texel.y - radius; z <= Texel.y + radius; z++)
    {
        float zo = z - zp;
        float zo2 = zo * zo;

        for (int x = Texel.x - radius; x <= Texel.x + radius; x++)
        {
            float xo = x - xp;
            float nw = 1.0 - saturate((xo * xo + zo2) * 0.25);
            
            if (nw <= 0.0)
                continue;

            nw *= ONE_OVER_2PI;

            imageAtomicAdd(target, clamp_coords(Texel), nw * w);
        }
    }
}

void erosion_loop()
{
    ivec3 Texel = clamp_coords(ivec3(gl_GlobalInvocationID.xyz));

    if (Texel.z != gl_GlobalInvocationID.z)
        return;

    float Kq = 15.f;
    float Kw = 0.5;
    float Kr = 1.0 - Kw;
    float Kd = 0.1;
    float Ki = 0.5;
    float minSlope = 0.1;
    float g = 10.0;
    float Kg = g * 2.0;

    float xf = 0.0, zf = 0.0;
    float xp = Texel.x, zp = Texel.y;

    float h = sample_height(Texel, ivec3(0));

    float h00 = h;
    float h10 = sample_height(Texel, ivec3(1, 0, 0));
    float h01 = sample_height(Texel, ivec3(0, 1, 0));
    float h11 = sample_height(Texel, ivec3(1, 1, 0));

    float dx = 0.0, dz = 0.0;
    float s = 0.0, v = 0.0, w = (1.0 - (h - MinHeight) / (MaxHeight - MinHeight)) * 1000.0;

    int steps = 1000;
    while (w > 0.01 && steps > 0)
    {
        spill(Texel, xp, zp, Kw * w);

        steps--;
        float gx = h00 + h01 - h10 - h11;
        float gz = h00 + h10 - h01 - h11;

        dx = (dx - gx) * Ki + gx;
        dz = (dz - gz) * Ki + gz;

        float dl = sqrt(dx * dx + dz * dz);
        if (dl <= 0.001)
        {
            break;
        }
        else
        {
            dx /= dl;
            dz /= dl;
        }

        float nxp = xp + dx;
        float nzp = zp + dz;

        Texel = ivec3(int(floor(nxp)), int(floor(nzp)), Texel.z);

        float nxf = fract(nxp);
        float nzf = fract(nzp);

        float nh00 = sample_height(Texel, ivec3(0));
        float nh10 = sample_height(Texel, ivec3(1, 0, 0));
        float nh01 = sample_height(Texel, ivec3(0, 1, 0));
        float nh11 = sample_height(Texel, ivec3(1, 1, 0));

        float nh = mix(nh00, nh10, nxf) * (1-nzf) + mix(nh01, nh11, nxf) * nzf;

        if (nh >= h)
        {
            break;
        }

        float dh = h - nh;
        float slope = dh;

        w *= 1 - Kw;

        xp=nxp; zp=nzp;
        xf=nxf; zf=nzf;

        h=nh;
        h00=nh00;
        h10=nh10;
        h01=nh01;
        h11=nh11;
    }

    spill(Texel, xp, zp, Kw * w);
}

void main()
{
    if (gl_GlobalInvocationID.x < imageSize(target).x && gl_GlobalInvocationID.y < imageSize(target).y)
        erosion_loop();
}