#version 460

// #define SKY_SCATTER_ONLY

#include "ubo.glsl"
#include "lighting.glsl"
#include "cubemap_matrix.glsl"

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

layout(binding = 1, rgba32f) uniform writeonly imageCube outImage;
layout(binding = 2) uniform sampler2D TransmittanceLUT;
layout(binding = 3) uniform sampler2D IrradianceLUT;
layout(binding = 4) uniform sampler3D InscatteringLUT;

void main()
{
    vec2 size = imageSize(outImage).xy;
    if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y)
    {
        int ViewIndex = int(gl_GlobalInvocationID.z);
        vec2 UV = (0.5 + vec2(gl_GlobalInvocationID.xy)) / size;
        vec4 ndcSpace = vec4(2.0 * UV - 1.0, 1.0, 1.0);
        vec4 viewSpace = inverse(Projection) * ndcSpace;
        vec4 worldSpace = inverse(View[ViewIndex]) * vec4(viewSpace.xyz, 0.0);
        vec3 direction = normalize(worldSpace.xyz);

        vec4 scattering = vec4(MaxLightIntensity * SkyScattering(TransmittanceLUT, InscatteringLUT, ubo.CameraPosition.xyz, direction, ubo.SunDirection.xyz), 1.0);
        imageStore(outImage, ivec3(gl_GlobalInvocationID.xyz), scattering);
    }
}