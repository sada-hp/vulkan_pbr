#version 460

// #define SKY_SCATTER_ONLY

#include "ubo.glsl"
#include "lighting.glsl"
#include "cubemap_matrix.glsl"

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

layout(binding = 1, rgba32f) uniform writeonly imageCubeArray outImage;
layout(binding = 2) uniform sampler2D TransmittanceLUT;
layout(binding = 3) uniform sampler2D IrradianceLUT;
layout(binding = 4) uniform sampler3D InscatteringLUT;

void main()
{
    vec2 size = imageSize(outImage).xy;
    if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y)
    {
        int ViewIndex = int(gl_GlobalInvocationID.z);
        vec2 UV = (0.5 + vec2(gl_GlobalInvocationID.xy)) / size;
        vec4 ndcSpace = vec4(2.0 * UV - 1.0, 0.0, 1.0);
        vec4 worldSpace = Reprojection[ViewIndex] * ndcSpace;
        vec3 direction = normalize(worldSpace.xyz);

        float Hit = SphereMinDistance(ubo.CameraPosition.xyz, direction, vec3(0.0), Rg);
        Hit = Hit == 0 ? SphereMinDistance(ubo.CameraPosition.xyz, direction, vec3(0.0), Rt) : Hit;
        vec3 HitPosition = ubo.CameraPosition.xyz + Hit * direction;
        vec3 SurfacePosition = ubo.WorldUp.xyz * Rg;

        vec3 Sun = ubo.SunDirection.xyz;
        float Rp = length(HitPosition);
        float Re = Rg;
        float PdotL = dot(HitPosition, Sun) / Rp;
        float EdotL = dot(SurfacePosition, Sun) / Rg; 

        vec4 scattering = vec4(SkyScattering(TransmittanceLUT, InscatteringLUT, ubo.CameraPosition.xyz, direction, Sun), 1.0);
        vec4 radiance   = vec4(GetIrradiance(IrradianceLUT, Rp, PdotL) + GetTransmittance(TransmittanceLUT, Rp, PdotL) * GetTransmittance(TransmittanceLUT, Re, EdotL), 1.0);
        imageStore(outImage, ivec3(gl_GlobalInvocationID.xy, gl_GlobalInvocationID.z), scattering);
        imageStore(outImage, ivec3(gl_GlobalInvocationID.xy, gl_GlobalInvocationID.z + 6), radiance);
    }
}