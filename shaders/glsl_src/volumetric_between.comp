#version 460
#include "volumetric.glsl"

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

void main()
{
    vec2 size = imageSize(outImage).xy;
    ivec2 Texel = ivec2(2, 1) * ivec2(gl_GlobalInvocationID.xy);
    Texel.x += gl_GlobalInvocationID.y % 2 == 0 ? int(In.Order % 2 == 1) : int(In.Order % 2 == 0);
    outScattering = vec4(0.0, 0.0, 0.0, 1.0);
    outDepth = 0.0;

    if (Texel.x < size.x && Texel.y < size.y)
    {
        vec2 ScreenUV = (0.5 + vec2(Texel)) / size;
        vec4 ScreenNDC = vec4(2.0 * ScreenUV - 1.0, 0.0, 1.0);
        vec4 ScreenWorld = vec4(ubo.ReprojectionMatrix * ScreenNDC);

        vec4 OldPosition = vec4(uboOld.ViewProjectionMatrix * ScreenWorld);
        OldPosition.xy = (OldPosition.xy / OldPosition.w) * 0.5 + 0.5;
        float sampledDepth = imageLoad(depthImage, ivec2(size * OldPosition.xy)).r;
        float inDepth = OldPosition.x >= 0.0 && OldPosition.x <= 1.0 && OldPosition.y >= 0.0 && OldPosition.y <= 1.0 ? sampledDepth : 0.0;
        vec4 WorldPosition = inDepth == 0.0 ? ScreenWorld : vec4(ubo.ReprojectionMatrix * vec4(ScreenNDC.xy, inDepth, 1.0));
        vec3 inWorld = WorldPosition.xyz / WorldPosition.w;

        vec3 RayOrigin = vec3(ubo.CameraPositionFP64.xyz);
        vec3 SphereCenter = vec3(0.0, 0.0, 0.0);

        RayMarch Ray;
        Ray.Direction = normalize(ScreenWorld.xyz);

        Hits.Ground = inDepth == 0.0 ? SphereMinDistance(RayOrigin, Ray.Direction, SphereCenter, Rg) : distance(divide_w(vec4(ubo.ReprojectionMatrix * vec4(ScreenNDC.xy, inDepth, 1.0))).xyz, RayOrigin);
        Hits.TopCloud = SphereMinDistance(RayOrigin, Ray.Direction, SphereCenter, Params.TopBound);
        Hits.BottomCloud = SphereMinDistance(RayOrigin, Ray.Direction, SphereCenter, Params.BottomBound);
        Hits.Camera = float(ubo.CameraRadius);

        float muHoriz = sqrt(1.0 - pow(Rg / Hits.Camera, 2.0));
        float horizon = dot(RayOrigin, Ray.Direction) / Hits.Camera + muHoriz;
        if (horizon > 0)
        {
            float t = Hits.Ground == 0 ? Hits.TopCloud : (Hits.Ground > Hits.BottomCloud ? min(Hits.TopCloud, Hits.Ground) : Hits.TopCloud);
            Ray.End = RayOrigin;
            Ray.Start = RayOrigin + Ray.Direction * t;
        }
        else
        {
            float t = Hits.Ground == 0 ? Hits.BottomCloud : min(Hits.Ground, Hits.BottomCloud);

            Ray.End = RayOrigin;
            Ray.Start = RayOrigin + Ray.Direction * t;
        }

        MarchToCloud(Ray, distance(Ray.Start, Ray.End));

        if (outScattering.a != 1.0)
        {
            vec4 clip1 = vec4(ubo.ViewProjectionMatrix * vec4(Ray.FirstHit, 1.0));
            vec4 clip2 = vec4(ubo.ViewProjectionMatrix * vec4(Ray.LastHit, 1.0));
            outDepth = saturate(max(clip1.z / clip1.w, clip2.z / clip2.w));

            outScattering = outDepth > sampledDepth ? vec4(mix(outScattering.rgb, texture(oldImage, OldPosition.xy).rgb, 0.25), outScattering.a) : vec4(0.0, 0.0, 0.0, 1.0);
        }

        imageStore(outImage, Texel, outScattering);
        imageStore(depthImage, Texel, vec4(sampledDepth, outDepth, 0.0, 0.0));
    }
}