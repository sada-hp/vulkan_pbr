#version 460
#include "noise.glsl"
#include "common.glsl"
#include "cubemap_matrix.glsl"

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, rgba32f) uniform writeonly imageCube outImage;

layout (constant_id = 0) const uint frequency = 4;
layout (constant_id = 1) const uint worley_octaves = 4;
layout (constant_id = 2) const uint perlin_octaves = 4;

void main()
{
    vec2 size = imageSize(outImage).xy;
    if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y)
    {
        int ViewIndex = int(gl_GlobalInvocationID.z);
        vec2 UV = (0.5 + vec2(gl_GlobalInvocationID.xy)) / size;

        vec2 s1 = 0.5 + 0.5 * vec2(cos(asin(UV.y * 2.0 - 1.0)), sin(acos(UV.x * 2.0 - 1.0)));
        float mask = perlin(UV, 0.25 * frequency) * 0.5 + 0.5;

        float w = 1.0 - fbm_worley(UV, frequency, worley_octaves);

        float p1 = fbm_perlin(0.5 * (UV + s1.xy), frequency, perlin_octaves) * 0.5 + 0.5;
        float p2 = fbm_perlin(UV, frequency, perlin_octaves) * 0.5 + 0.5;
        float p = p1;
        
        float perlin_worley = remap(p2, 0.0, 1.0, w, 1.0);

        imageStore(outImage, ivec3(gl_GlobalInvocationID.xyz), vec4(mix(p1, p2, mask), w, perlin_worley, 0.0));
    }
}