#version 460
#include "common.glsl"
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D HDRColor;
layout (binding = 1, rgba32f) uniform image2D BlurH;
layout (binding = 2, rgba32f) uniform image2D BlurV;

layout(push_constant) uniform PushConstants
{
    float Order;
} Constants;

void main()
{
    ivec2 Texel = ivec2(gl_GlobalInvocationID.xy);

    if (Texel.x < imageSize(BlurH).x && Texel.y < imageSize(BlurH).y)
    {
        if (Constants.Order == 0)
        {
            vec4 Color = texelFetch(HDRColor, Texel, 0);
            float Brightness = dot(Color.rgb, vec3(0.2126, 0.7152, 0.0722));

            if (Brightness > 1.413)
            {
                imageStore(BlurV, Texel, Color * smootherstep(0.0, 1.0, Brightness - 1.413));
            }
            else
            {
                imageStore(BlurV, Texel, vec4(0.0));
            }
        }
        else
        {
            bool Horizontal = int(Constants.Order) % 2 == 1;
            float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);

            if (Horizontal)
            {
                vec3 Color = imageLoad(BlurV, Texel).rgb;

                for(int i = 1; i < 5; i++)
                {
                    Color += imageLoad(BlurV, Texel + ivec2(i, 0)).rgb * weight[i];
                    Color += imageLoad(BlurV, Texel - ivec2(i, 0)).rgb * weight[i];
                }
                
                imageStore(BlurH, Texel, vec4(Color, 1.0));
            }
            else
            {
            vec3 Color = imageLoad(BlurH, Texel).rgb;

                for(int i = 1; i < 5; i++)
                {
                    Color += imageLoad(BlurH, Texel + ivec2(0, i)).rgb * weight[i];
                    Color += imageLoad(BlurH, Texel - ivec2(0, i)).rgb * weight[i];
                }
                
                imageStore(BlurV, Texel, vec4(Color, 1.0));
            }
        }
    }
}