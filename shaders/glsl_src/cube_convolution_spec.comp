#version 460
#include "ubo.glsl"
#include "brdf.glsl"
#include "lighting.glsl"
#include "cubemap_matrix.glsl"

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

layout(push_constant) uniform constants
{
    float Roughness;
} In;

layout(binding = 1) uniform sampler2D TransmittanceLUT;
layout(binding = 2) uniform sampler2D IrradianceLUT;
layout(binding = 3) uniform sampler3D InscatteringLUT;
layout(binding = 4) uniform samplerCube EnvironmentLUT;

layout(set = 1, binding = 0, rgba32f) uniform writeonly imageCube outImage;

void main()
{
    vec2 size = imageSize(outImage).xy;
    if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y)
    {
        int ViewIndex = int(gl_GlobalInvocationID.z);
        vec2 UV = (0.5 + vec2(gl_GlobalInvocationID.xy)) / size;
        vec4 ndcSpace = vec4(2.0 * UV - 1.0, 1.0, 1.0);
        vec4 viewSpace = inverse(Projection) * ndcSpace;
        vec4 worldSpace = inverse(View[ViewIndex]) * vec4(viewSpace.xyz, 0.0);
        vec3 direction = normalize(worldSpace.xyz);
        vec3 outColor = vec3(0.0);

        vec3 N = direction;    
        vec3 R = N;
        vec3 V = R;

        const uint SAMPLE_COUNT = 512;
        float totalWeight = 0.0;   
        for(uint i = 0u; i < SAMPLE_COUNT; i++)
        {
            vec2 Xi = Hammersley(i, SAMPLE_COUNT);
            vec3 H  = ImportanceSampleGGX(Xi, N, In.Roughness);
            vec3 L  = normalize(2.0 * dot(V, H) * H - V);

            float NdotL = max(dot(N, L), 0.0);
            if(NdotL > 0.0)
            {
                outColor += texture(EnvironmentLUT, L).rgb * NdotL;
                totalWeight += NdotL;
            }
        }

        outColor = outColor / totalWeight;

        imageStore(outImage, ivec3(gl_GlobalInvocationID.xyz), vec4(outColor, 1.0));
    }
}