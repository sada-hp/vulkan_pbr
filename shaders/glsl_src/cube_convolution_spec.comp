#version 460
#include "ubo.glsl"
#include "brdf.glsl"
#include "lighting.glsl"
#include "cubemap_matrix.glsl"

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

layout (constant_id = 2) const int Samples = 0;

layout(push_constant) uniform constants
{
    float Roughness;
} Push;

layout(binding = 1) uniform sampler2D TransmittanceLUT;
layout(binding = 2) uniform sampler2D IrradianceLUT;
layout(binding = 3) uniform sampler3D InscatteringLUT;
layout(binding = 4) uniform samplerCube EnvironmentLUT;

layout(set = 1, binding = 0, rgba32f) uniform writeonly imageCube outImage;
layout(std140, set = 1, binding = 1) readonly buffer PrecomputeBuffer
{
	vec4 sSample[];
} In;

void main()
{
    vec2 size = imageSize(outImage).xy;
    vec2 envsize = textureSize(EnvironmentLUT, 0).xy;
    if (gl_GlobalInvocationID.x < size.x && gl_GlobalInvocationID.y < size.y)
    {
        const uint SAMPLE_COUNT = 32;

        int ViewIndex = int(gl_GlobalInvocationID.z);
        vec2 UV = (0.5 + vec2(gl_GlobalInvocationID.xy)) / size;
        vec4 ndcSpace = vec4(2.0 * UV - 1.0, 1.0, 1.0);
        vec4 viewSpace = inverse(Projection) * ndcSpace;
        vec4 worldSpace = inverse(View[ViewIndex]) * vec4(viewSpace.xyz, 0.0);
        vec3 direction = normalize(worldSpace.xyz);
        vec3 outColor = vec3(0.0);

        vec3 N = direction;
        vec3 R = N;
        vec3 V = R;

        // from tangent-space vector to world-space sample vector
        vec3 U   = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
        vec3 T   = normalize(cross(U, N));
        vec3 B   = cross(N, T);
        mat3 TBN = mat3(T, B, N);

        float totalWeight = 0.0;   
        const float MipBias = 1.0f;
        const float a = Push.Roughness * Push.Roughness;
        for(uint i = 0u; i < Samples; i++)
        {
            vec2 Xi = In.sSample[i].xy;
            vec3 H  = ImportanceSampleGGX(TBN, Xi, a);
            vec3 L  = normalize(2.0 * dot(V, H) * H - V);

            float NdotL = max(dot(N, L), 0.0);
            if(NdotL > 0.0)
            {
                float NdotH = max(dot(N, H), 0.0);
                float HdotV = max(dot(H, V), 0.0);

                float GGX = D_DistributionGGX(NdotH, Push.Roughness) / (4.0f * HdotV) + 0.001;
                float OmegaS = 1.0 / (Samples * GGX);
                float OmegaP = In.sSample[i].z;

                float MipLevel = max(0.5 * log2(OmegaS / OmegaP) + MipBias, 0.0f);

                outColor += textureLod(EnvironmentLUT, L, MipLevel).rgb * NdotL;
                totalWeight += NdotL;
            }
        }
        outColor = outColor / totalWeight;

        imageStore(outImage, ivec3(gl_GlobalInvocationID.xyz), vec4(outColor, 1.0));
    }
}